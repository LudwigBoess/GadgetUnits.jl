var documenterSearchIndex = {"docs":
[{"location":"#GadgetUnits.jl","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"","category":"section"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"This package is a subproject of GadJet.jl and provides some basic unit conversion functionality to work with the SPH code \"Gadget\" by Volker Springel (doi:10.1111/j.1365-2966.2005.09655.x).","category":"page"},{"location":"#Unit-Conversion","page":"GadgetUnits.jl","title":"Unit Conversion","text":"","category":"section"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"GadgetUnits.jl uses Unitful.jl and UnitfulAstro.jl to store the unit conversion factors with actual units in place. You can convert the internal units of Gadget into cgs units by defining the object GadgetPhysicalUnits:","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"GU = GadgetPhysicalUnits(l_unit::Float64=3.085678e21, m_unit::Float64=1.989e43, v_unit::Float64=1.e5;\n                         a_scale::Float64=1.0, hpar::Float64=1.0,\n                         γ_th::Float64=5.0/3.0, γ_CR::Float64=4.0/3.0, xH::Float64=0.76)","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"where the keyword arguments are:","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"a_scale::Float64 = 1.0:  Cosmological scale factor of the simulation. Can be passed with the header h as h.time.\nhpar::Float64 = 1.0:     Hubble constant as 'little h'. Can be passed with header h as h.h0.\nγ_th::Float64 = 5.0/3.0: Adiabatic index of gas.\nγ_CR::Float64 = 4.0/3.0: Adiabatic index of cosmic ray component.\nxH::Float64 = 0.76:      Hydrogen fraction of the simulation, if run without chemical model.","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"This returns an object of type GadgetPhysicalUnits with the following properties:","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"struct GadgetPhysicalUnits\n\n    x_cgs::typeof(1.0u\"cm\")         # position in cm\n    v_cgs::typeof(1.0u\"cm/s\")       # velocity in cm/s\n    m_cgs::typeof(1.0u\"g\")          # mass in g\n\n    t_s::typeof(1.0u\"s\")            # time in sec\n    t_Myr::typeof(1.0u\"Myr\")        # time in Myr\n\n    E_cgs::typeof(1.0u\"erg\")        # energy in erg\n    E_eV::typeof(1.0u\"eV\")          # energy in eV\n\n    B_cgs::typeof(1.0u\"Gs\")         # magnetic field in Gauss\n\n    rho_cgs::typeof(1.0u\"g/cm^3\")   # density in g/cm^3\n    rho_ncm3::typeof(1.0u\"n_e\")     # density in N_p/cm^3\n\n    T_K::typeof(1.0u\"K\")            # temperature in K\n\n    P_th_cgs::typeof(1.0u\"Ba\")      # thermal pressure in Ba\n    P_CR_cgs::typeof(1.0u\"Ba\")      # cosmic ray pressure in Ba\n\nend","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"To convert, say positions of gas particles from a cosmological simulation to physical units you can use:","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"\nh     = read_header(filename)\n\npos   = read_snap(filename, \"POS\", 0)\n\nGU    = GadgetPhysicalUnits(a_scale=h.time, hpar=h.h0)\n\npos .*= GU.x_cgs\n","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"If you have different units than the standard Gadget ones you can call the object cunstructor with different values","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"GU = GadgetPhysicalUnits(your_l_unit, your_m_unit, your_v_unit; kwargs...)","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"Converting the units can then be done with Unitful.jl and UnitfulAstro.jl. So if you want to convert the position units from the default cm to Mpc you can do this as:","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"using Unitful\nusing UnitfulAstro\n\npos = read_snap(filename, \"POS\", 0)\npos = @. pos * GU.x_cgs |> u\"Mpc\"","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"If you want to get rid of the units, for example if you need basic datatypes again for a function you can use the funtion ustrip:","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"pos = ustrip(pos)","category":"page"},{"location":"#Primitive-unit-type","page":"GadgetUnits.jl","title":"Primitive unit type","text":"","category":"section"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"If you want to have the same functionality, but without using Unitful.jl you can construct a similar object:","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"GU = GadgetPhysical(l_unit::Float64=3.085678e21, m_unit::Float64=1.989e43, v_unit::Float64=1.e5;\n                    a_scale::Float64=1.0, hpar::Float64=1.0,\n                    γ_th::Float64=5.0/3.0, γ_CR::Float64=4.0/3.0, xH::Float64=0.76)","category":"page"},{"location":"","page":"GadgetUnits.jl","title":"GadgetUnits.jl","text":"This uses the same conversions, but leaves out the actual unit strings.","category":"page"}]
}
